• expressão atômica: sem valor intermediário acessível
• EP - simular processos de forma sintética (só consome CPU, sem aguardo de E/S), o FCFS não precisa fazer preempção (interrompe o processo em execução para atender outro) -> única entidade que pode retirá-lo é ele msm
• Professor, eu tenho uma duvida sobre o EP.  Supondo que um processo tenha t0 = 8, eu preciso esperar 8 seg reais para criar a thread? eu posso criar todas as threads juntas e só garantir que uma thread não comece o trabalho dela antes de d0?
R: Pode. Pode ler o arq. de entrada inteiro, guardar e só ativar os eventos quando o relógio mostrar que acontecerem.
• Aproveitando, como eu sei que o t0 vai ser sempre menor que o tempo atual que o escalonador está rodando?
R: ?? não tem como. Se o maior t0 que tem é 200, alguma hora o simulador chega em 200?
• É normal o execve terminar o programa após a execução?
R: rodando o du com exec -> se você rodá-lo, quando acabar volta pro shell. lembre-se de fazer o fork.
• Também queria saber se podemos ter um cenário onde a CPU pode ficar parada esperando porque um processo já acabou e o próximo só chega daqui a alguns segundos?
R: Sim. É pra fazer exatamente isso.
• É garantido que a entrada está ordenada pelos t0s?
R: Sim.
• Aproveitando também, para um processos ter certo tempo real, pensei em fazer um cálculo envolvendo o CLOCKS_PER_SEC pra ficar num loop por determinado tempo, ou tem alguma outra forma de fazer? 
R: Não precisa disso tudo. Coloca um sleep ou usleep. O tempo será em número natural, então a função sleep() já é suficiente.
• Considerando que o simulador está rodando fazem 12 segundos e nesse momento ele lê um processo com t0 = 10 segundos
R: os caras que vão chegando vão ter que esperar. :( vão ficar na fila.
• sim, mas considera que eu leio todos os processos e termino de ler depois de 5 segundos, mas tem um processo que deveria ter executado em 3 segundos, mas eu demorei 5s pra ler, o que fazer?
R: se isso acontecer, espera ler tudo para começar a rodar depois.
• Lembrando que quando faz o execve você tá substituindo a imagem direta. Por isso precisa do fork() antes.
• No FCFS,  pode acontecer a seguinte situação: um processo chega em t = 1s e demora 10s para terminar. Então em t = 1s, o processo começa e roda por 10s. Se em algum momento entre 1s e 10s chegar um segundo processo, esse só passará a ser executado após t=11s, quando o primeiro processo terminar? mesmo que seu t0 esteja entre 1 e 10?
R: sim. supondo fcfs (escalonador), isso vaia acontecer. é necessário um bom arquivo de entrada para msotrar as vantagens e desvantagens de algoritmos.
• Professor, mas a gente tem que ficar operando durante o tempo todo ou podemos fazer apenas uma operação?
Do tipo, fazer um sleep de 10 segundos e depois fazer só uma operação pra simular essa thread rodando?
R: você tem que ter um jeito de contar que o processo rodasse isso, esse tempo. Um jeito é fazer 10x sleep() de 1 segundo. no round-robin, teremos que vários processos irão acabar mais rápido (funciona com preempção). O sleep() não consome CPU, deslocamento de bit (i = i +1 com sleep(1)), algo assim. -> fica de olho no top (do shell), um consumo de 10% de CPU é daora. faz uma thread (while(1)) rodando o top em paralelo, rodando uma soma com sleep em x milissegundos. se não tiver comendo muita cpu, faz multiplicação ou potência ou algo assim. 
• ESCREVA top NO BASH E TECLE 1
• professor, fiquei confuso sobre o tempo agora. devemos usar segundos ou a espera pode ser de menos tempo?
R: segundos!!!!!!!
• eu tava pensando no controlador do simulador do tipo: agora é t = 5. Aí ele olha na fila e vê se tem alguem com t0 = 5. Não tem ninguem. Aí eu ponho um sleep(1) antes da proxima iteração?
R: sim, tudo bem. Mas vamos falar de Round-Robin hoje. cuidado com isso.
• professor, no FCFS, quando dois processos chegam no mesmo instante de tempo, vale escolher qualquer um para ser o "primeiro"?
R: sim, a decisão é sua. escolha qualquer um. (pega o primeiro do arquivo, como sugestão, para não comer cpu)
• Professor, falando nisso, precisamos usar todos os processadores no escalonador? Se sim, existe algum jeito de o programa saber quantos cores vc tem no seu computador? Uma variável de ambiente ou algo do tipo?
R: pode usar, mas recomenda usar apenas 1. pode ser que o SO escolha diferentes. tem como saber quantos cores, não lembra como. 
• Professor, pode usar o time.h pra isso?
R: sim.
• A gente vai ter que interromper com syscalls pra dar chance a outros processos?
R: daniel recomenda que interrompa com semáforos. Inicializa todos os semáforos com zero, e passa pro escalonador para ver o primeiro da fila e da V no processo que é o primeiro da fila. todos os rpocessos tão num loop infinito, e como deu V ela começa a rodar. P  no final. Quando o escalonador for tirar porque deu quantum ou tempo menor, dá um P nessa thread para pará-la. não precisa usar syscalls, pode usar pthreads.
• No caso do FCFS se passarem do deadline não tem o que a gente fazer, né?
R: não, isso é pros gráficos.

Dúvidas sobre EP
Escalonador de processos -> como funcionaria a preeempção?
• teríamos que criar 1 thread para cada um dos processos e revezar entre elas! (seu programa deve ter exatamente 10 threads, elas não precisam existir - as 10 - a todo tempo) -> você pode ler o arquivo inteiro e ir criando as threads em determinado tempo ou ir criando aos poucos
• não posso destruir threads para quando houver preempção e criar outra! tenho que usar sempre as mesmas/revezar

Professor, não tem um escalonador que ordena por deadline mais próxima?
• sim, mas não vou conseguir cobrir esses escalonadores.

Professor, aproveitando, no EP como a gente faz pra ter o controle de colocar as threads em cada CPU? 
• não entendi sua pergunta. isso faz parte do trabalho. se estiver usando apenas 1 cpu. não precisar se preocupar com isso; eu tenho que limitar o número de threads máximo - vai ter que explicar se usou só uma cpu ou mais cpus e limitar quanto o escalonador estiver funcionar. vc não precisa se preocupar de usar cada cpu separada - se acontecer das cpus rodarem de uma vez n tem problema.

Professor, quando eu crio uma thread, tem algum jeito de criar ela e ela ficar parada
até a main desbloquear ela?
• mais fácil usar semáforos. (sigatomic, qualquer coisa dentro da pthread;h)

Professor, se eu assumir que meu escalonador só pode ter exatamente um processo executando a cada instante de tempo, posso ter uma única thread e chamá-la com os dados do processo correspondente a cada mudança de contexto?
ao invés de ter n threads aguardando pra executar
• não, precisa ter n threads esperando para executar

Professor, a função passada para a thread na sua criação pode ser diferente dependendo do escalonador usado? 
• sim. mas para quê? (o daniel achou isso bizarro)

Os semáforos são suficientes para fazer todo o controle de todas as threads?
• eu acho que sim

Professor, o que é a arquitetura de um shell? (pergunto isso porque o enunciado pede para explicar a arquitetura do shell nos slides)
• se criou parser, os tipos, etc. qual eh a base do negócio?

• SJF -> você não ordena pela ordem chegada mas pelo tempo mais curto

Professor dá pra uma thread bloquear a main ou é melhor fazer ume thread escalonadora tb?
• é melhor (daniel) fazer uma thread separada escalonadora

• daniel vai testar com milhares de threads talvez TT
• tem que justificar na apresentação o pq de usar uma quantidade fixa de threads

Professor, mas e aquele caso que a gente tinha falado lá no início do EP
De alcançar o número máximo de threads?
• daniel> vou testar no meu PC, vou ver quantas threads cosigo criar.

professor, essa questão de deixa mais generico também vale pro shell tbm?
por exemplo não limitar tamanho de argumentos e fazer o buffer que cuida de armazenar isso ser dinâmico
• no shell não vou fazer nada além do que pedi!

Intervalo de confiança baseado na quantidade de processos que não passaram? Processos que terminam antes e depois de deadline. 
•  É a quantidade de processos (não o tempo). Fazer um histograma com barra de erro.

Professor, eu e minha dupla temos uma dúvida sobre o EP. Os cores da CPU que a thread está usando/liberando devem ser exibidos. Para isso pesquisamos um pouco e pensamos em fazer o seguinte: definir uma "afinidade" da thread para um determinado core, assim, para cada thread, saberíamos em que núcleo ela está/estava rodando. Isso é uma solução válida?
• tudo bem. tenha cuidado de não mandar mais de uma thread para a mesma CPU. supondo que tem uma lista de núcleos que estão livres, daniel supõe que vc faça isso de uma forma circular. também pode fazer: eu acho q tem uma função em C que fala o core virtual que a thread ta rodando. (diz em q CPU vc quer que a thread rode, e aí já tá pronto o controle). --> sched_getcpu() (PODE DEVOLVER O VALOR VIRTUAL) da sched.h 
USE comando top para ver se o número da CPU bate.

Estamos usando a função sleep para executar o trabalho da thread, e imprimindo o core que ela está rodando antes e depois do sleep. Mas as vezes, devido ao escalonador do SO,  as CPUs antes do sleep (entrada na CPU) e depois (saída da CPU) são diferentes. Isso seria um problema?
• não tem problema! vc tem que confiar no valor que tá sendo devolvido.

mas no ep é preciso sempre rodar no mesmo core?
• não. se vc tiver condição de controlar (affinity), tudo bem, mas vc tbm pode jogar essa responsabilidade pro SO. supondo q vc faça um código que use apenas uma CPU (virtual, física, tanto faz) por vez (1 thread rodando por vez). (?????)se eu olhar pro sue simulador tem que ter no máximo 8 threads rodadno (??????) e o número esperado de retorno de CPU vai de 0 a 7.

sobre essa quantidade de threads paralelas, podemos usar um #define em arquivo .h e colocar em instruções de compilação? Ou temos que detectar?
• decisão de implementação. Se eu fro usar com uma quantidade maior, o daniel edita. pode tanto detextar quanto botar fixo (mas s ebotar fixo tem que avisar q ele vai mduar)

Aproveitando professor, no nosso ep, pro round robin e srtn, a gente a cada segundo volta pro escalonador pra ele ver se tem que trocar a thread rodando no processador (por exemplo, se chegou alguma nesse t que tem menor tempo restante). Esse retorno pro escalonador a cada segundo seria considerado mudança de contexto?
• (não precisa fazer assim), mas não precisa considerar mudança de contexto (dt em que teve mudança ininterrupta - assim que acaba um, o outro começa) obs: o round-robin vau ser grande, mas o srt e o sfcs?? não tanto)

No meu escalonador eu dei um sleep(1) pra não exigir muito processamento porém as vezes o escalonador fica em idle por 1s pq ta executando o código de dentro do loop sendo que ele poderia estar executando um processo nesse 1s, esse erro é aceitável? Sem o sleep no escalonador isso não acontece
• pode usar usleep() ou nanosleep() também. LEMBRE DE CONSERTAR OS VALORES PQ OVERFLOW!

professor, se na implementação feita, as threads forem criadas antes de de fato começarem a rodar o processo (nesse meio tempo ela fica parada no semáforo, por exemplo), devemos notificar que essa thread está usando tal cpu quando ela é inicializada ou apenas quando começar a rodar o processo? 
• so quando começar

pthread_cond_wait, signal...

